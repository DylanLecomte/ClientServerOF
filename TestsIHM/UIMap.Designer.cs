// ------------------------------------------------------------------------------
//  <auto-generated>
//      Ce code a été généré par un générateur de test codé de l'interface utilisateur.
//      Version : 14.0.0.0 
//
//      Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//      le code est régénéré.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestsIHM
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Connextion avec Login/MDP correct
        /// </summary>
        public void Connexion()
        {
            #region Variable Declarations
            WpfEdit uITextBoxLoginEdit = this.UIConnectionWindow.UITextBoxLoginEdit;
            WpfEdit uIPasswordBoxEdit = this.UIConnectionWindow.UIPasswordBoxEdit;
            WpfButton uIConnectionButton = this.UIConnectionWindow.UIConnectionButton;
            #endregion

            // Taper 'user' dans 'TextBoxLogin' zone de texte
            uITextBoxLoginEdit.Text = this.ConnexionParams.UITextBoxLoginEditText;

            // Taper '{Tab}' dans 'TextBoxLogin' zone de texte
            Keyboard.SendKeys(uITextBoxLoginEdit, this.ConnexionParams.UITextBoxLoginEditSendKeys, ModifierKeys.None);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.ConnexionParams.UIPasswordBoxEditSendKeys, true);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.ConnexionParams.UIPasswordBoxEditSendKeys1, ModifierKeys.Control, true);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.ConnexionParams.UIPasswordBoxEditSendKeys2, true);

            // Clic 'Connection' bouton
            Mouse.Click(uIConnectionButton, new Point(60, 19));
        }
        
        /// <summary>
        /// Test de pari du client
        /// </summary>
        public void Bet()
        {
            #region Variable Declarations
            WpfEdit uITextBox_BetEdit = this.UIClientWindow.UITextBox_BetEdit;
            WpfButton uIBetButton = this.UIClientWindow.UIBetButton;
            #endregion

            // Taper '5' dans 'textBox_Bet' zone de texte
            uITextBox_BetEdit.Text = this.BetParams.UITextBox_BetEditText;

            // Clic 'Bet' bouton
            Mouse.Click(uIBetButton, new Point(56, 19));
        }
        
        /// <summary>
        /// AddMoney - Utilisez 'AddMoneyParams' pour passer les paramètres dans cette méthode.
        /// </summary>
        public void AddMoney()
        {
            #region Variable Declarations
            WpfEdit uITextBox_CardNumberEdit = this.UIWindowPaymentWindow.UITextBox_CardNumberEdit;
            WpfEdit uITextBox_CardDateEdit = this.UIWindowPaymentWindow.UITextBox_CardDateEdit;
            WpfEdit uITextBox_CardCryptoEdit = this.UIWindowPaymentWindow.UITextBox_CardCryptoEdit;
            WpfEdit uITextBox_MoneyToAddEdit = this.UIWindowPaymentWindow.UITextBox_MoneyToAddEdit;
            WpfWindow uIWindowPaymentWindow = this.UIWindowPaymentWindow;
            WpfButton uIPayerButton = this.UIWindowPaymentWindow.UIPayerButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Taper '4012888888881881' dans 'textBox_CardNumber' zone de texte
            uITextBox_CardNumberEdit.Text = this.AddMoneyParams.UITextBox_CardNumberEditText;

            // Taper '{Tab}' dans 'textBox_CardNumber' zone de texte
            Keyboard.SendKeys(uITextBox_CardNumberEdit, this.AddMoneyParams.UITextBox_CardNumberEditSendKeys, ModifierKeys.None);

            // Taper '12/2018' dans 'textBox_CardDate' zone de texte
            uITextBox_CardDateEdit.Text = this.AddMoneyParams.UITextBox_CardDateEditText;

            // Taper '{Tab}' dans 'textBox_CardDate' zone de texte
            Keyboard.SendKeys(uITextBox_CardDateEdit, this.AddMoneyParams.UITextBox_CardDateEditSendKeys, ModifierKeys.None);

            // Taper '123' dans 'textBox_CardCrypto' zone de texte
            uITextBox_CardCryptoEdit.Text = this.AddMoneyParams.UITextBox_CardCryptoEditText;

            // Taper '{Tab}' dans 'textBox_CardCrypto' zone de texte
            Keyboard.SendKeys(uITextBox_CardCryptoEdit, this.AddMoneyParams.UITextBox_CardCryptoEditSendKeys, ModifierKeys.None);

            // Taper '20' dans 'textBox_MoneyToAdd' zone de texte
            uITextBox_MoneyToAddEdit.Text = this.AddMoneyParams.UITextBox_MoneyToAddEditText;

            // Clic 'WindowPayment' fenêtre
            Mouse.Click(uIWindowPaymentWindow, new Point(135, 326));

            // Clic 'Payer' bouton
            Mouse.Click(uIPayerButton, new Point(20, 1));

            // Clic 'OK' bouton
            Mouse.Click(uIOKButton, new Point(5, 24));
        }
        
        /// <summary>
        /// CreateUser - Utilisez 'CreateUserParams' pour passer les paramètres dans cette méthode.
        /// </summary>
        public void CreateUser()
        {
            #region Variable Declarations
            WpfEdit uITextBoxLoginEdit = this.UIConnectionWindow.UITextBoxLoginEdit;
            WpfEdit uIPasswordBoxEdit = this.UIConnectionWindow.UIPasswordBoxEdit;
            WpfText uILoginText1 = this.UIConnectionWindow.UILoginText.UILoginText1;
            WpfWindow uIConnectionWindow = this.UIConnectionWindow;
            WpfCheckBox uINouvelutilisateurCheckBox = this.UIConnectionWindow.UINouvelutilisateurCheckBox;
            WpfButton uIConnectionButton = this.UIConnectionWindow.UIConnectionButton;
            #endregion

            // Taper 'NewUser' dans 'TextBoxLogin' zone de texte
            uITextBoxLoginEdit.Text = this.CreateUserParams.UITextBoxLoginEditText;

            // Taper '{Tab}' dans 'TextBoxLogin' zone de texte
            Keyboard.SendKeys(uITextBoxLoginEdit, this.CreateUserParams.UITextBoxLoginEditSendKeys, ModifierKeys.None);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CreateUserParams.UIPasswordBoxEditSendKeys, true);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CreateUserParams.UIPasswordBoxEditSendKeys1, ModifierKeys.Control, true);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CreateUserParams.UIPasswordBoxEditSendKeys2, true);

            // Clic 'Login' étiquette
            Mouse.Click(uILoginText1, new Point(16, 15));

            // Taper 'NewUser' dans 'TextBoxLogin' zone de texte
            uITextBoxLoginEdit.Text = this.CreateUserParams.UITextBoxLoginEditText1;

            // Taper '{Tab}' dans 'TextBoxLogin' zone de texte
            Keyboard.SendKeys(uITextBoxLoginEdit, this.CreateUserParams.UITextBoxLoginEditSendKeys1, ModifierKeys.None);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CreateUserParams.UIPasswordBoxEditSendKeys3, true);

            // Clic 'Connection' fenêtre
            Mouse.Click(uIConnectionWindow, new Point(160, 221));

            // Sélectionner 'Nouvel utilisateur' case à cocher
            uINouvelutilisateurCheckBox.Checked = this.CreateUserParams.UINouvelutilisateurCheckBoxChecked;

            // Clic 'Connection' bouton
            Mouse.Click(uIConnectionButton, new Point(59, 20));
        }
        
        /// <summary>
        /// AddMoneyTest - Utilisez 'AddMoneyTestParams' pour passer les paramètres dans cette méthode.
        /// </summary>
        public void AddMoneyTest()
        {
            #region Variable Declarations
            WpfEdit uITextBox_CardNumberEdit = this.UIWindowPaymentWindow.UITextBox_CardNumberEdit;
            WpfEdit uITextBox_CardDateEdit = this.UIWindowPaymentWindow.UITextBox_CardDateEdit;
            WpfEdit uITextBox_CardCryptoEdit = this.UIWindowPaymentWindow.UITextBox_CardCryptoEdit;
            WpfEdit uITextBox_MoneyToAddEdit = this.UIWindowPaymentWindow.UITextBox_MoneyToAddEdit;
            WpfButton uIPayerButton = this.UIWindowPaymentWindow.UIPayerButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Taper '4012888888881881' dans 'textBox_CardNumber' zone de texte
            uITextBox_CardNumberEdit.Text = this.AddMoneyTestParams.UITextBox_CardNumberEditText;

            // Taper '{Tab}' dans 'textBox_CardNumber' zone de texte
            Keyboard.SendKeys(uITextBox_CardNumberEdit, this.AddMoneyTestParams.UITextBox_CardNumberEditSendKeys, ModifierKeys.None);

            // Taper '12/2018' dans 'textBox_CardDate' zone de texte
            uITextBox_CardDateEdit.Text = this.AddMoneyTestParams.UITextBox_CardDateEditText;

            // Taper '{Tab}' dans 'textBox_CardDate' zone de texte
            Keyboard.SendKeys(uITextBox_CardDateEdit, this.AddMoneyTestParams.UITextBox_CardDateEditSendKeys, ModifierKeys.None);

            // Taper '123' dans 'textBox_CardCrypto' zone de texte
            uITextBox_CardCryptoEdit.Text = this.AddMoneyTestParams.UITextBox_CardCryptoEditText;

            // Taper '{Tab}' dans 'textBox_CardCrypto' zone de texte
            Keyboard.SendKeys(uITextBox_CardCryptoEdit, this.AddMoneyTestParams.UITextBox_CardCryptoEditSendKeys, ModifierKeys.None);

            // Taper '20' dans 'textBox_MoneyToAdd' zone de texte
            uITextBox_MoneyToAddEdit.Text = this.AddMoneyTestParams.UITextBox_MoneyToAddEditText;

            // Clic 'Payer' bouton
            Mouse.Click(uIPayerButton, new Point(27, 17));

            // Clic 'OK' bouton
            Mouse.Click(uIOKButton, new Point(52, 13));
        }
        
        /// <summary>
        /// ConnexionTest - Utilisez 'ConnexionTestParams' pour passer les paramètres dans cette méthode.
        /// </summary>
        public void ConnexionTest()
        {
            #region Variable Declarations
            WpfEdit uITextBoxLoginEdit = this.UIConnectionWindow.UITextBoxLoginEdit;
            WpfEdit uIPasswordBoxEdit = this.UIConnectionWindow.UIPasswordBoxEdit;
            WpfButton uIConnectionButton = this.UIConnectionWindow.UIConnectionButton;
            #endregion

            // Taper 'usertest' dans 'TextBoxLogin' zone de texte
            uITextBoxLoginEdit.Text = this.ConnexionTestParams.UITextBoxLoginEditText;

            // Taper '{Tab}' dans 'TextBoxLogin' zone de texte
            Keyboard.SendKeys(uITextBoxLoginEdit, this.ConnexionTestParams.UITextBoxLoginEditSendKeys, ModifierKeys.None);

            // Taper '********' dans 'PasswordBox' zone de texte
            Keyboard.SendKeys(uIPasswordBoxEdit, this.ConnexionTestParams.UIPasswordBoxEditSendKeys, true);

            // Clic 'Connection' bouton
            Mouse.Click(uIConnectionButton, new Point(46, 15));
        }
        
        #region Properties
        public virtual ConnexionParams ConnexionParams
        {
            get
            {
                if ((this.mConnexionParams == null))
                {
                    this.mConnexionParams = new ConnexionParams();
                }
                return this.mConnexionParams;
            }
        }
        
        public virtual BetParams BetParams
        {
            get
            {
                if ((this.mBetParams == null))
                {
                    this.mBetParams = new BetParams();
                }
                return this.mBetParams;
            }
        }
        
        public virtual AddMoneyParams AddMoneyParams
        {
            get
            {
                if ((this.mAddMoneyParams == null))
                {
                    this.mAddMoneyParams = new AddMoneyParams();
                }
                return this.mAddMoneyParams;
            }
        }
        
        public virtual CreateUserParams CreateUserParams
        {
            get
            {
                if ((this.mCreateUserParams == null))
                {
                    this.mCreateUserParams = new CreateUserParams();
                }
                return this.mCreateUserParams;
            }
        }
        
        public virtual AddMoneyTestParams AddMoneyTestParams
        {
            get
            {
                if ((this.mAddMoneyTestParams == null))
                {
                    this.mAddMoneyTestParams = new AddMoneyTestParams();
                }
                return this.mAddMoneyTestParams;
            }
        }
        
        public virtual ConnexionTestParams ConnexionTestParams
        {
            get
            {
                if ((this.mConnexionTestParams == null))
                {
                    this.mConnexionTestParams = new ConnexionTestParams();
                }
                return this.mConnexionTestParams;
            }
        }
        
        public UIConnectionWindow UIConnectionWindow
        {
            get
            {
                if ((this.mUIConnectionWindow == null))
                {
                    this.mUIConnectionWindow = new UIConnectionWindow();
                }
                return this.mUIConnectionWindow;
            }
        }
        
        public UIClientWindow UIClientWindow
        {
            get
            {
                if ((this.mUIClientWindow == null))
                {
                    this.mUIClientWindow = new UIClientWindow();
                }
                return this.mUIClientWindow;
            }
        }
        
        public UIAntoineDylanGoogleDrWindow UIAntoineDylanGoogleDrWindow
        {
            get
            {
                if ((this.mUIAntoineDylanGoogleDrWindow == null))
                {
                    this.mUIAntoineDylanGoogleDrWindow = new UIAntoineDylanGoogleDrWindow();
                }
                return this.mUIAntoineDylanGoogleDrWindow;
            }
        }
        
        public UIWindowPaymentWindow UIWindowPaymentWindow
        {
            get
            {
                if ((this.mUIWindowPaymentWindow == null))
                {
                    this.mUIWindowPaymentWindow = new UIWindowPaymentWindow();
                }
                return this.mUIWindowPaymentWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private ConnexionParams mConnexionParams;
        
        private BetParams mBetParams;
        
        private AddMoneyParams mAddMoneyParams;
        
        private CreateUserParams mCreateUserParams;
        
        private AddMoneyTestParams mAddMoneyTestParams;
        
        private ConnexionTestParams mConnexionTestParams;
        
        private UIConnectionWindow mUIConnectionWindow;
        
        private UIClientWindow mUIClientWindow;
        
        private UIAntoineDylanGoogleDrWindow mUIAntoineDylanGoogleDrWindow;
        
        private UIWindowPaymentWindow mUIWindowPaymentWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'Connexion'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class ConnexionParams
    {
        
        #region Fields
        /// <summary>
        /// Taper 'user' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditText = "user";
        
        /// <summary>
        /// Taper '{Tab}' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "YN/mQM5J9PQyaTrMeVvgMxYZmM5e+OBQqCgnDBO2S7c5WAgJzVYeiJxrZm1IudzVlTfRoYzopIo=";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "GY/4yFKgxsVCEilbOvhsUw==";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys2 = "+9mdt4dtu36Tml9fufD2g6Gpyxnrn/C5avg5Bxz6FEYYPlcmg3abjTrF6dqhtZPK";
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'Bet'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class BetParams
    {
        
        #region Fields
        /// <summary>
        /// Taper '5' dans 'textBox_Bet' zone de texte
        /// </summary>
        public string UITextBox_BetEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'AddMoney'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class AddMoneyParams
    {
        
        #region Fields
        /// <summary>
        /// Taper '4012888888881881' dans 'textBox_CardNumber' zone de texte
        /// </summary>
        public string UITextBox_CardNumberEditText = "4012888888881881";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardNumber' zone de texte
        /// </summary>
        public string UITextBox_CardNumberEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '12/2018' dans 'textBox_CardDate' zone de texte
        /// </summary>
        public string UITextBox_CardDateEditText = "12/2018";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardDate' zone de texte
        /// </summary>
        public string UITextBox_CardDateEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '123' dans 'textBox_CardCrypto' zone de texte
        /// </summary>
        public string UITextBox_CardCryptoEditText = "123";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardCrypto' zone de texte
        /// </summary>
        public string UITextBox_CardCryptoEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '20' dans 'textBox_MoneyToAdd' zone de texte
        /// </summary>
        public string UITextBox_MoneyToAddEditText = "20";
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'CreateUser'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class CreateUserParams
    {
        
        #region Fields
        /// <summary>
        /// Taper 'NewUser' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditText = "NewUser";
        
        /// <summary>
        /// Taper '{Tab}' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "YN/mQM5J9PTXeg1IA9lAHCJstQDKHqruGJLbAij4HblVooYDIUjrbv9SQjjut9/7Fub15icKdsY=";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "GY/4yFKgxsVCEilbOvhsUw==";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys2 = "rEJoukAhcHd65xx8vehK8hWqpOnvzgMV";
        
        /// <summary>
        /// Taper 'NewUser' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditText1 = "NewUser";
        
        /// <summary>
        /// Taper '{Tab}' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditSendKeys1 = "{Tab}";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys3 = "YN/mQM5J9PQyaTrMeVvgMxYZmM5e+OBQAMU264zVoqaekaDm874nemc+gPJhIx4X74Q96rx14AkDDjPYe" +
            "hR7zw==";
        
        /// <summary>
        /// Sélectionner 'Nouvel utilisateur' case à cocher
        /// </summary>
        public bool UINouvelutilisateurCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'AddMoneyTest'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class AddMoneyTestParams
    {
        
        #region Fields
        /// <summary>
        /// Taper '4012888888881881' dans 'textBox_CardNumber' zone de texte
        /// </summary>
        public string UITextBox_CardNumberEditText = "4012888888881881";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardNumber' zone de texte
        /// </summary>
        public string UITextBox_CardNumberEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '12/2018' dans 'textBox_CardDate' zone de texte
        /// </summary>
        public string UITextBox_CardDateEditText = "12/2018";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardDate' zone de texte
        /// </summary>
        public string UITextBox_CardDateEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '123' dans 'textBox_CardCrypto' zone de texte
        /// </summary>
        public string UITextBox_CardCryptoEditText = "123";
        
        /// <summary>
        /// Taper '{Tab}' dans 'textBox_CardCrypto' zone de texte
        /// </summary>
        public string UITextBox_CardCryptoEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '20' dans 'textBox_MoneyToAdd' zone de texte
        /// </summary>
        public string UITextBox_MoneyToAddEditText = "20";
        #endregion
    }
    
    /// <summary>
    /// Paramètres à passer dans 'ConnexionTest'
    /// </summary>
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class ConnexionTestParams
    {
        
        #region Fields
        /// <summary>
        /// Taper 'usertest' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditText = "usertest";
        
        /// <summary>
        /// Taper '{Tab}' dans 'TextBoxLogin' zone de texte
        /// </summary>
        public string UITextBoxLoginEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Taper '********' dans 'PasswordBox' zone de texte
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "YN/mQM5J9PTx7D7DzjAKHA8/0OXbvd1FrW27FUgUtTYqh+k5VkBERfuc5LAFmGhtSN0XM3zxAdXny8XrV" +
            "55jiE1U8HgznVoNycoOMLFRw/4=";
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIConnectionWindow : WpfWindow
    {
        
        public UIConnectionWindow()
        {
            #region Critères de recherche
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Connection";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connection");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextBoxLoginEdit
        {
            get
            {
                if ((this.mUITextBoxLoginEdit == null))
                {
                    this.mUITextBoxLoginEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBoxLoginEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxLogin";
                    this.mUITextBoxLoginEdit.WindowTitles.Add("Connection");
                    #endregion
                }
                return this.mUITextBoxLoginEdit;
            }
        }
        
        public WpfEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUIPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordBox";
                    this.mUIPasswordBoxEdit.WindowTitles.Add("Connection");
                    #endregion
                }
                return this.mUIPasswordBoxEdit;
            }
        }
        
        public WpfButton UIConnectionButton
        {
            get
            {
                if ((this.mUIConnectionButton == null))
                {
                    this.mUIConnectionButton = new WpfButton(this);
                    #region Critères de recherche
                    this.mUIConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ButtonConnection";
                    this.mUIConnectionButton.WindowTitles.Add("Connection");
                    #endregion
                }
                return this.mUIConnectionButton;
            }
        }
        
        public UILoginText UILoginText
        {
            get
            {
                if ((this.mUILoginText == null))
                {
                    this.mUILoginText = new UILoginText(this);
                }
                return this.mUILoginText;
            }
        }
        
        public WpfCheckBox UINouvelutilisateurCheckBox
        {
            get
            {
                if ((this.mUINouvelutilisateurCheckBox == null))
                {
                    this.mUINouvelutilisateurCheckBox = new WpfCheckBox(this);
                    #region Critères de recherche
                    this.mUINouvelutilisateurCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "checkBox_NewAccount";
                    this.mUINouvelutilisateurCheckBox.WindowTitles.Add("Connection");
                    #endregion
                }
                return this.mUINouvelutilisateurCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextBoxLoginEdit;
        
        private WpfEdit mUIPasswordBoxEdit;
        
        private WpfButton mUIConnectionButton;
        
        private UILoginText mUILoginText;
        
        private WpfCheckBox mUINouvelutilisateurCheckBox;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UILoginText : WpfText
    {
        
        public UILoginText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelLogin";
            this.WindowTitles.Add("Connection");
            #endregion
        }
        
        #region Properties
        public WpfText UILoginText1
        {
            get
            {
                if ((this.mUILoginText1 == null))
                {
                    this.mUILoginText1 = new WpfText(this);
                    #region Critères de recherche
                    this.mUILoginText1.SearchProperties[WpfText.PropertyNames.Name] = "Login";
                    this.mUILoginText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUILoginText1.WindowTitles.Add("Connection");
                    #endregion
                }
                return this.mUILoginText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUILoginText1;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIClientWindow : WpfWindow
    {
        
        public UIClientWindow()
        {
            #region Critères de recherche
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Client";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Client");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextBox_BetEdit
        {
            get
            {
                if ((this.mUITextBox_BetEdit == null))
                {
                    this.mUITextBox_BetEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBox_BetEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_Bet";
                    this.mUITextBox_BetEdit.WindowTitles.Add("Client");
                    #endregion
                }
                return this.mUITextBox_BetEdit;
            }
        }
        
        public WpfButton UIBetButton
        {
            get
            {
                if ((this.mUIBetButton == null))
                {
                    this.mUIBetButton = new WpfButton(this);
                    #region Critères de recherche
                    this.mUIBetButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button_Bet";
                    this.mUIBetButton.WindowTitles.Add("Client");
                    #endregion
                }
                return this.mUIBetButton;
            }
        }
        
        public WpfButton UIAddmoneyButton
        {
            get
            {
                if ((this.mUIAddmoneyButton == null))
                {
                    this.mUIAddmoneyButton = new WpfButton(this);
                    #region Critères de recherche
                    this.mUIAddmoneyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button_Add_Money";
                    this.mUIAddmoneyButton.WindowTitles.Add("Client");
                    #endregion
                }
                return this.mUIAddmoneyButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextBox_BetEdit;
        
        private WpfButton mUIBetButton;
        
        private WpfButton mUIAddmoneyButton;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIAntoineDylanGoogleDrWindow : WinWindow
    {
        
        public UIAntoineDylanGoogleDrWindow()
        {
            #region Critères de recherche
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Antoine & Dylan - Google Drive - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("Antoine & Dylan - Google Drive - Google Chrome");
            this.WindowTitles.Add("c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                    "k Overflow - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public WinWindow UICShouldIusetheCreditWindow
        {
            get
            {
                if ((this.mUICShouldIusetheCreditWindow == null))
                {
                    this.mUICShouldIusetheCreditWindow = new WinWindow(this);
                    #region Critères de recherche
                    this.mUICShouldIusetheCreditWindow.SearchProperties[WinWindow.PropertyNames.Name] = "c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                        "k Overflow";
                    this.mUICShouldIusetheCreditWindow.WindowTitles.Add("c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                            "k Overflow - Google Chrome");
                    #endregion
                }
                return this.mUICShouldIusetheCreditWindow;
            }
        }
        
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        
        private WinWindow mUICShouldIusetheCreditWindow;
        
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIItemTabList : WinTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche
            this.WindowTitles.Add("Antoine & Dylan - Google Drive - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinTabPage UICShouldIusetheCreditTabPage
        {
            get
            {
                if ((this.mUICShouldIusetheCreditTabPage == null))
                {
                    this.mUICShouldIusetheCreditTabPage = new WinTabPage(this);
                    #region Critères de recherche
                    this.mUICShouldIusetheCreditTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                        "k Overflow";
                    this.mUICShouldIusetheCreditTabPage.WindowTitles.Add("Antoine & Dylan - Google Drive - Google Chrome");
                    #endregion
                }
                return this.mUICShouldIusetheCreditTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUICShouldIusetheCreditTabPage;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Critères de recherche
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "347066536";
            this.WindowTitles.Add("c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                    "k Overflow - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UICShouldIusetheCreditDocument
        {
            get
            {
                if ((this.mUICShouldIusetheCreditDocument == null))
                {
                    this.mUICShouldIusetheCreditDocument = new WinControl(this);
                    #region Critères de recherche
                    this.mUICShouldIusetheCreditDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUICShouldIusetheCreditDocument.WindowTitles.Add("c# - Should I use the CreditCardAttribute to validate credit card numbers? - Stac" +
                            "k Overflow - Google Chrome");
                    #endregion
                }
                return this.mUICShouldIusetheCreditDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUICShouldIusetheCreditDocument;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIWindowPaymentWindow : WpfWindow
    {
        
        public UIWindowPaymentWindow()
        {
            #region Critères de recherche
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WindowPayment";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WindowPayment");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextBox_CardNumberEdit
        {
            get
            {
                if ((this.mUITextBox_CardNumberEdit == null))
                {
                    this.mUITextBox_CardNumberEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBox_CardNumberEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_CardNumber";
                    this.mUITextBox_CardNumberEdit.WindowTitles.Add("WindowPayment");
                    #endregion
                }
                return this.mUITextBox_CardNumberEdit;
            }
        }
        
        public WpfEdit UITextBox_CardDateEdit
        {
            get
            {
                if ((this.mUITextBox_CardDateEdit == null))
                {
                    this.mUITextBox_CardDateEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBox_CardDateEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_CardDate";
                    this.mUITextBox_CardDateEdit.WindowTitles.Add("WindowPayment");
                    #endregion
                }
                return this.mUITextBox_CardDateEdit;
            }
        }
        
        public WpfEdit UITextBox_CardCryptoEdit
        {
            get
            {
                if ((this.mUITextBox_CardCryptoEdit == null))
                {
                    this.mUITextBox_CardCryptoEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBox_CardCryptoEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_CardCrypto";
                    this.mUITextBox_CardCryptoEdit.WindowTitles.Add("WindowPayment");
                    #endregion
                }
                return this.mUITextBox_CardCryptoEdit;
            }
        }
        
        public WpfEdit UITextBox_MoneyToAddEdit
        {
            get
            {
                if ((this.mUITextBox_MoneyToAddEdit == null))
                {
                    this.mUITextBox_MoneyToAddEdit = new WpfEdit(this);
                    #region Critères de recherche
                    this.mUITextBox_MoneyToAddEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_MoneyToAdd";
                    this.mUITextBox_MoneyToAddEdit.WindowTitles.Add("WindowPayment");
                    #endregion
                }
                return this.mUITextBox_MoneyToAddEdit;
            }
        }
        
        public WpfButton UIPayerButton
        {
            get
            {
                if ((this.mUIPayerButton == null))
                {
                    this.mUIPayerButton = new WpfButton(this);
                    #region Critères de recherche
                    this.mUIPayerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button";
                    this.mUIPayerButton.WindowTitles.Add("WindowPayment");
                    #endregion
                }
                return this.mUIPayerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextBox_CardNumberEdit;
        
        private WpfEdit mUITextBox_CardDateEdit;
        
        private WpfEdit mUITextBox_CardCryptoEdit;
        
        private WpfEdit mUITextBox_MoneyToAddEdit;
        
        private WpfButton mUIPayerButton;
        #endregion
    }
    
    [GeneratedCode("Générateur de test codé de l\'interface utilisateur", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Critères de recherche
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Critères de recherche
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
